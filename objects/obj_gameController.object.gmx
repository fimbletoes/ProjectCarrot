<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Enemy Spawning counter
secondsBetweenEnemySpawns = 1;
secondsSinceLastEnemySpawn = 0;
playerScore = 0; //rabbits stopped
carrotsStolen = 0; //carrots picked up
rabbitScore = 0; //carrots succesfully stolen

depth = -3;

// torch may run out of batteries.

/* maybe your hired by people to protect their gardens overnight. 
You get paid, which then you can buy awesome equipment and batteries. */
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var spawnX;
var spawnY;

// Enemy Spawning
secondsSinceLastEnemySpawn = secondsSinceLastEnemySpawn + 1/room_speed;

/*if secondsSinceLastEnemySpawn &gt;= secondsBetweenEnemySpawns 
    {
        //spawn enemy
        if choose(true, false) 
        {
            spawnX = random(room_width);
            spawnY = choose(0, room_height + 100);
        
        } else 
        {
            spawnX = choose(0, room_width + 100);
            spawnY = random(room_height);
        }
        
        instance_create(spawnX,spawnY, choose(obj_rabbit));
        secondsSinceLastEnemySpawn = 0;
    }*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -3;
draw_set_color(c_white);
draw_text(x+750,y+50,"Rabbits Stopped " + string(playerScore));
draw_text(x+750,y+100,"Carrots Stolen " + string(carrotsStolen));
draw_text(x+750,y+150,"Carrots Stored " + string(rabbitScore));
draw_text(x+750,y+200,"Rabbits Spawned " + string(obj_wave.rabbitCount));
draw_text(x+750,y+250,"Wave " + string(obj_wave.wave));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
